import logging
from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command
import yfinance as yf
import asyncio

API_TOKEN = ''

if not API_TOKEN:
    raise ValueError("API_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –æ–Ω —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è.")

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)

# –°–æ–∑–¥–∞–µ–º –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä
bot = Bot(token=API_TOKEN)
dp = Dispatcher()

def validate_ticker(ticker):

# –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —Ç–∏–∫–µ—Ä. –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç True, –µ—Å–ª–∏ —Ç–∏–∫–µ—Ä —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –∏–Ω–∞—á–µ False.

    try:
        test_data = yf.Ticker(ticker).history(period="1d")
        return not test_data.empty
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Ç–∏–∫–µ—Ä–∞ {ticker}: {e}")
        return False

def analyze_stock(stock_ticker):

# –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –∞–∫—Ü–∏—é –ø–æ —Å—Ç—Ä–∞—Ç–µ–≥–∏—è–º –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ä–µ–π—Ç–∏–Ω–≥ –∏ —Ç–µ–∫—É—â—É—é —Ü–µ–Ω—É.

    try:
        stock_data = yf.download(stock_ticker, period="6mo", progress=False)

        if stock_data.empty or len(stock_data) < 50:
            return None, None

        stock_data['SMA50'] = stock_data['Close'].rolling(window=50).mean()
        stock_data['SMA200'] = stock_data['Close'].rolling(window=200).mean()
        stock_data['EMA12'] = stock_data['Close'].ewm(span=12).mean()
        stock_data['EMA26'] = stock_data['Close'].ewm(span=26).mean()
        stock_data['MACD'] = stock_data['EMA12'] - stock_data['EMA26']
        stock_data['Signal_Line'] = stock_data['MACD'].ewm(span=9).mean()
        delta = stock_data['Close'].diff(1)
        gain = delta.where(delta > 0, 0).rolling(window=14).mean()
        loss = -delta.where(delta < 0, 0).rolling(window=14).mean()
        rs = gain / loss
        stock_data['RSI'] = 100 - (100 / (1 + rs))
        stock_data['BB_Lower'] = stock_data['Close'].rolling(window=20).mean() - 2 * stock_data['Close'].rolling(window=20).std()

        strategies = {
            "SMA Crossover": stock_data['SMA50'].iloc[-1] > stock_data['SMA200'].iloc[-1],
            "RSI Oversold": stock_data['RSI'].iloc[-1] < 30,
            "MACD Divergence": stock_data['MACD'].iloc[-1] > stock_data['Signal_Line'].iloc[-1],
            "Momentum": delta.iloc[-1] > 0,
            "Bollinger Bands": stock_data['Close'].iloc[-1] < stock_data['BB_Lower'].iloc[-1],
        }

        score = sum(strategies.values())
        current_price = stock_data['Close'].iloc[-1]
        return int(score), float(current_price)
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ –∞–∫—Ü–∏–∏ {stock_ticker}: {e}")
        return None, None

@dp.message(Command(commands=['start', 'help']))
async def send_welcome(message: types.Message):
    await message.reply(
        "–ü—Ä–∏–≤–µ—Ç! –Ø –ø–æ–º–æ–≥—É —Ç–µ–±–µ –≤—ã–±—Ä–∞—Ç—å –ª—É—á—à—É—é –∞–∫—Ü–∏—é –¥–ª—è –ø–æ–∫—É–ø–∫–∏ –ø—Ä–∏ –ø–æ–º–æ—â–∏ 5 –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö —Å—Ç—Ä–∞—Ç–µ–≥–∏–π.\n"
        "–í–≤–µ–¥–∏—Ç–µ –¥–æ 10 —Ç–∏–∫–µ—Ä–æ–≤ –∞–∫—Ü–∏–π —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é, –∏ —è –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É—é –∏—Ö."
    )

@dp.message()
async def analyze_stocks(message: types.Message):
    tickers = [ticker.strip().upper() for ticker in message.text.split(",")]

    if len(tickers) > 10:
        await message.reply("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –Ω–µ –±–æ–ª–µ–µ 10 —Ç–∏–∫–µ—Ä–æ–≤.")
        return

    invalid_tickers = [ticker for ticker in tickers if not validate_ticker(ticker)]
    if invalid_tickers:
        await message.reply(f"–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ —Ç–∏–∫–µ—Ä—ã: {', '.join(invalid_tickers)}. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∏—Ö.")
        return

    results = {}
    for ticker in tickers:
        try:
            score, price = analyze_stock(ticker)
            if score is not None and price is not None:
                results[ticker] = (score, price)
            else:
                results[ticker] = ("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ", None)
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ —Ç–∏–∫–µ—Ä–∞ {ticker}: {e}")
            results[ticker] = ("–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞", None)

    if not results:
        await message.reply("–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å —É–∫–∞–∑–∞–Ω–Ω—ã–µ –∞–∫—Ü–∏–∏. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ç–∏–∫–µ—Ä—ã.")
        return

    sorted_results = sorted(
        results.items(),
        key=lambda item: (-item[1][0] if isinstance(item[1][0], int) else 0, item[1][1] or float('inf'))
    )

    response = "–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–Ω–∞–ª–∏–∑–∞:\n\n"
    for ticker, result in sorted_results:
        score, price = result
        if isinstance(score, int):
            response += f"üîπ {ticker}: –£–¥–æ–≤–ª–µ—Ç–≤–æ—Ä—è–µ—Ç—Å—è —Å—Ç—Ä–∞—Ç–µ–≥–∏–π {score}, –¶–µ–Ω–∞ ${price:.2f}\n"
        else:
            response += f"üîπ {ticker}: {score}\n"

    best_ticker = sorted_results[0][0]
    best_score = sorted_results[0][1][0]
    best_price = sorted_results[0][1][1]

    if isinstance(best_score, int):
        response += f"\nüåü –õ—É—á—à–∞—è –∞–∫—Ü–∏—è: {best_ticker} (–°—Ç—Ä–∞—Ç–µ–≥–∏–∏: {best_score}, –¶–µ–Ω–∞: ${best_price:.2f})"

    await message.reply(response)

async def start_bot():
    await dp.start_polling(bot)
